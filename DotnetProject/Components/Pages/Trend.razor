@page "/trend"
@using DotnetProject.Models
@using DotnetProject.Services
@inject CsvReaderService CsvService
@inject HttpClient Http

<h3>Utols√≥ bejut√°si √°tlag predikci√≥ja szakonk√©nt (megye ‚Üí iskola ‚Üí szak)</h3>

<div class="flex flex-col gap-3 mb-4">
    <RadzenDropDown @bind-Value="@selectedCounty" Data="@availableCounties" 
                    Placeholder="Megye kiv√°laszt√°sa" Style="width: 300px;" 
                    Change="@OnCountyChanged" />
    
    <RadzenDropDown @bind-Value="@selectedSchool" Data="@filteredSchools" 
                    Placeholder="Iskola kiv√°laszt√°sa" Style="width: 300px;" 
                    Change="@OnSchoolChanged" />

    <RadzenDropDown @bind-Value="@selectedSpec" Data="@filteredSpecs" 
                    Placeholder="Szak kiv√°laszt√°sa" Style="width: 300px;" />

    @if (!string.IsNullOrEmpty(selectedSpec))
    {
        <RadzenButton Text="2025-√∂s predikci√≥" Click="@(() => Predict())" 
                      Style="width: 300px;" Icon="trending_up" />
    }
</div>

@if (predictionValue != null)
{
    <h4>üìä V√°rhat√≥ utols√≥ bejut√°si √°tlag 2025-ben: <b>@($"{predictionValue:F2}")</b></h4>
}

@if (trendPoints.Any())
{
    <h5 class="mt-4">üìà El≈ëz≈ë √©vek utols√≥ bejut√°si √°tlagai</h5>
    <RadzenChart Style="height: 400px;">
        <RadzenLineSeries 
            Data="@trendPoints" 
            CategoryProperty="YearString" 
            ValueProperty="LastMadm" 
            Title="Utols√≥ bejut√°si √°tlag" />
        <RadzenCategoryAxis />
        <RadzenValueAxis Min="0" Max="10" Step="1" />
    </RadzenChart>
}

@code {
    private List<string> availableCounties = new();
    private List<string> availableSchools = new();
    private List<string> availableSpecs = new();

    private List<string> filteredSchools = new();
    private List<string> filteredSpecs = new();
    
    private List<TrendPoint> trendPoints = new();

    private string selectedCounty;
    private string selectedSchool;
    private string selectedSpec;

    private double? predictionValue = null;

    private List<RepartizareModel> allData = new();

    protected override void OnInitialized()
    {
        allData = CsvService.LoadByYear(2024); // Use 2024 to get known values

        availableCounties = allData
            .Select(r => r.County)
            .Where(c => !string.IsNullOrWhiteSpace(c))
            .Distinct()
            .OrderBy(c => c)
            .ToList();

        availableSchools = allData
            .Select(r => r.CleanedSchoolName)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList();

        availableSpecs = allData
            .Select(r => r.CleanedSpecialization)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList();
    }

    private void OnCountyChanged(object value)
    {
        selectedSchool = null;
        selectedSpec = null;
        predictionValue = null;

        filteredSchools = allData
            .Where(r => r.County == (string)value)
            .Select(r => r.CleanedSchoolName)
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .OrderBy(n => n)
            .ToList();
    }

    private void OnSchoolChanged(object value)
    {
        selectedSpec = null;
        predictionValue = null;

        filteredSpecs = allData
            .Where(r => r.CleanedSchoolName == (string)value)
            .Select(r => r.CleanedSpecialization)
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .OrderBy(n => n)
            .ToList();
    }

    private async Task Predict()
    {
        predictionValue = null;
        var currentYear = DateTime.Now.Year;

        var match = allData.FirstOrDefault(r =>
            r.CleanedSchoolName == selectedSchool &&
            r.CleanedSpecialization == selectedSpec);

        if (match == null)
        {
            Console.WriteLine("‚ùå Iskola √©s szak p√°ros nem tal√°lhat√≥.");
            return;
        }

        var requestPayload = new
        {
            year = currentYear,
            h = match.HighSchoolHtml,
            sp = match.SpecializationHtml
        };

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5000/predict", requestPayload);

            var responseText = await response.Content.ReadAsStringAsync();
            Console.WriteLine("üîÅ Raw response: " + responseText);

            if (response.IsSuccessStatusCode)
            {
                var json = System.Text.Json.JsonDocument.Parse(responseText);
                if (json.RootElement.TryGetProperty("predicted_madm", out var value))
                {
                    predictionValue = value.GetDouble();
                }
                await LoadTrend();
            }
            else
            {
                Console.WriteLine($"‚ùå Request failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("‚ùå Error calling prediction API: " + ex.Message);
        }
    }
    
    private async Task LoadTrend()
    {
        trendPoints.Clear();

        var currentYear = DateTime.Now.Year;

        for (int year = 2020; year < currentYear; year++)
        {
            var yearlyData = CsvService.LoadByYear(year);

            var filtered = yearlyData
                .Where(r => r.CleanedSchoolName == selectedSchool && r.CleanedSpecialization == selectedSpec)
                .Where(r => double.TryParse(r.AdmissionAverage, out _))
                .Select(r => double.Parse(r.AdmissionAverage))
                .ToList();

            if (filtered.Any())
            {
                trendPoints.Add(new TrendPoint
                {
                    Year = year,
                    LastMadm = filtered.Min() // always the lowest admitted
                });
            }
        }
        
        if (predictionValue.HasValue)
        {
            trendPoints.Add(new TrendPoint
            {
                Year = DateTime.Now.Year,
                LastMadm = predictionValue.Value
            });
        }
        
        Console.WriteLine("üìà TrendPoints count: " + trendPoints.Count);
        foreach (var tp in trendPoints)
        {
            Console.WriteLine($" - {tp.Year}: {tp.LastMadm}");
        }
        
        StateHasChanged();
    }

}
