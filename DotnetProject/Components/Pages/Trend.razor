@page "/trend"
@using DotnetProject.Models
@using DotnetProject.Services
@inject CsvReaderService CsvService
@inject HttpClient Http

<div class="container p-4">
    <h3 class="mb-4 text-primary">
        <i class="rz-icon-trending-up mr-2"></i>
        Utols√≥ bejut√°si √°tlag predikci√≥ja szakonk√©nt
    </h3>

    <div class="card p-4 mb-4 shadow">
        <div class="row">
            <div class="col-md-6">
                <div class="selection-container mb-4">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H5">V√°lasszon egy megy√©t, iskol√°t √©s szakot:</RadzenText>

                    <RadzenDropDown Class="w-100 mb-3"
                                    @bind-Value="@selectedCounty"
                                    Data="@availableCounties"
                                    Placeholder="Megye kiv√°laszt√°sa"
                                    Change="@OnCountyChanged"
                                    AllowFiltering="true" />

                    <RadzenDropDown Class="w-100 mb-3"
                                    @bind-Value="@selectedSchool"
                                    Data="@filteredSchools"
                                    Placeholder="Iskola kiv√°laszt√°sa"
                                    Change="@OnSchoolChanged"
                                    AllowFiltering="true"
                                    Disabled="@(string.IsNullOrEmpty(selectedCounty))" />

                    <RadzenDropDown Class="w-100 mb-3"
                                    @bind-Value="@selectedSpec"
                                    Data="@filteredSpecs"
                                    Placeholder="Szak kiv√°laszt√°sa"
                                    AllowFiltering="true"
                                    Disabled="@(string.IsNullOrEmpty(selectedSchool))" />
                </div>

                <RadzenButton Click="@(() => Predict())"
                              Text="2025-√∂s predikci√≥ lek√©r√©se"
                              ButtonStyle="ButtonStyle.Primary"
                              Shade="Shade.Darker"
                              Icon="trending_up"
                              Class="w-100"
                              Disabled="@(string.IsNullOrEmpty(selectedSpec))" />
            </div>

            <div class="col-md-6">
                @if (predictionValue.HasValue)
                {
                    <div class="prediction-container text-center p-4 rounded shadow h-100">
                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" Class="mb-4">
                            <i class="rz-icon-brightness-auto mr-2"></i>Predikci√≥
                        </RadzenText>

                        <RadzenCard Class="prediction-card">
                            <div class="text-center">
                                <RadzenText TextStyle="TextStyle.Subtitle1">Utols√≥ bejut√°si √°tlag 2025-ben:</RadzenText>
                                <RadzenText TextStyle="TextStyle.H4" Class="prediction-value text-primary">
                                    @($"{predictionValue:F2}")
                                </RadzenText>
                            </div>
                        </RadzenCard>

                        @if (trendPoints.Count > 1)
                        {
                            <div class="mt-3">
                                <RadzenText TextStyle="TextStyle.Caption">
                                    @GetTrendText()
                                </RadzenText>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center p-4 rounded shadow h-100 d-flex align-items-center justify-content-center">
                        <div>
                            <i class="rz-icon-trending-up" style="font-size: 3rem; color: #ddd;"></i>
                            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">
                                V√°lasszon ki egy szakot √©s kattintson a predikci√≥ra a j√∂v≈ë √©vi felv√©teli √°tlag megtekint√©s√©hez
                            </RadzenText>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (trendPoints.Any())
    {
        <div class="card p-4 shadow">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="mb-4">
                <i class="rz-icon-timeline mr-2"></i>El≈ëz≈ë √©vek utols√≥ bejut√°si √°tlagai
            </RadzenText>

            <RadzenChart Style="height: 400px;">
                <RadzenLineSeries
                    Data="@trendPoints"
                    CategoryProperty="YearString"
                    ValueProperty="LastMadm"
                    Title="Utols√≥ bejut√°si √°tlag"
                    LineType="LineType.Solid"
                    Stroke="#1976d2"
                    StrokeWidth="3">
                    <RadzenMarkers MarkerType="MarkerType.Circle" Size="8" />
                </RadzenLineSeries>

                @if (predictionValue.HasValue)
                {
                    <RadzenLineSeries
                        Data="@(new[] { trendPoints.LastOrDefault() })"
                        CategoryProperty="YearString"
                        ValueProperty="LastMadm"
                        Title="2025 Predikci√≥"
                        Stroke="#ff6d00"
                        StrokeWidth="0">
                        <RadzenMarkers MarkerType="MarkerType.Diamond" Size="12" Fill="#ff6d00" Stroke="#ff6d00" StrokeWidth="2" />
                    </RadzenLineSeries>
                }

                <RadzenCategoryAxis Padding="20" />
                <RadzenValueAxis Min="Math.Max(0, GetMinValue() - 0.5)" Max="Math.Min(10, GetMaxValue() + 0.5)" Step="0.5">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Utols√≥ bejut√°si √°tlag" />
                </RadzenValueAxis>

                <RadzenLegend Position="LegendPosition.Bottom" />

                <RadzenChartTooltipOptions Visible="true" />
            </RadzenChart>
        </div>
    }
</div>

<style>
    .prediction-value {
        font-weight: bold;
        font-size: 2rem;
    }

    .prediction-card {
        background-color: #f8f9fa;
        border-left: 5px solid #1976d2;
    }
</style>

@code {
    private List<string> availableCounties = new();
    private List<string> availableSchools = new();
    private List<string> availableSpecs = new();

    private List<string> filteredSchools = new();
    private List<string> filteredSpecs = new();

    private List<TrendPoint> trendPoints = new();

    private string selectedCounty;
    private string selectedSchool;
    private string selectedSpec;

    private double? predictionValue = null;

    private List<TrendPoint> realDataPoints = new();
    private TrendPoint predictedPoint;

    private List<RepartizareModel> allData = new();

    protected override void OnInitialized()
    {
        allData = CsvService.LoadByYear(2024);

        availableCounties = allData
            .Select(r => r.County)
            .Where(c => !string.IsNullOrWhiteSpace(c))
            .Distinct()
            .OrderBy(c => c)
            .ToList();

        availableSchools = allData
            .Select(r => r.CleanedSchoolName)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList();

        availableSpecs = allData
            .Select(r => r.CleanedSpecialization)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList();
    }

    private void OnCountyChanged(object value)
    {
        selectedSchool = null;
        selectedSpec = null;
        predictionValue = null;
        trendPoints.Clear();

        filteredSchools = allData
            .Where(r => r.County == (string)value)
            .Select(r => r.CleanedSchoolName)
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .OrderBy(n => n)
            .ToList();
    }

    private void OnSchoolChanged(object value)
    {
        selectedSpec = null;
        predictionValue = null;
        trendPoints.Clear();

        filteredSpecs = allData
            .Where(r => r.CleanedSchoolName == (string)value)
            .Select(r => r.CleanedSpecialization)
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .OrderBy(n => n)
            .ToList();
    }

    private async Task Predict()
    {
        predictionValue = null;
        trendPoints.Clear();
        var currentYear = DateTime.Now.Year;

        var match = allData.FirstOrDefault(r =>
            r.CleanedSchoolName == selectedSchool &&
            r.CleanedSpecialization == selectedSpec);

        if (match == null)
        {
            Console.WriteLine("‚ùå Iskola √©s szak p√°ros nem tal√°lhat√≥.");
            return;
        }

        var requestPayload = new
        {
            year = currentYear,
            h = match.HighSchoolHtml,
            sp = match.SpecializationHtml
        };

        try
        {
            var response = await Http.PostAsJsonAsync("http://127.0.0.1:5000/predict", requestPayload);

            var responseText = await response.Content.ReadAsStringAsync();
            Console.WriteLine("üîÅ Raw response: " + responseText);

            if (response.IsSuccessStatusCode)
            {
                var json = System.Text.Json.JsonDocument.Parse(responseText);
                if (json.RootElement.TryGetProperty("predicted_madm", out var value))
                {
                    predictionValue = value.GetDouble();
                }
                await LoadTrend();
            }
            else
            {
                Console.WriteLine($"‚ùå Request failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("‚ùå Error calling prediction API: " + ex.Message);
        }
    }

    private async Task LoadTrend()
    {
        trendPoints.Clear();
        realDataPoints.Clear();
        predictedPoint = null;

        var currentYear = DateTime.Now.Year;

        for (int year = 2021; year <= 2024; year++)
        {
            var yearlyData = CsvService.LoadByYear(year);

            var filtered = yearlyData
                .Where(r => r.CleanedSchoolName == selectedSchool && r.CleanedSpecialization == selectedSpec)
                .Where(r => double.TryParse(r.AdmissionAverage, out _))
                .Select(r => double.Parse(r.AdmissionAverage))
                .ToList();

            if (filtered.Any())
            {
                var point = new TrendPoint
                {
                    Year = year,
                    YearString = year.ToString(),
                    LastMadm = filtered.Min()
                };

                realDataPoints.Add(point);
                trendPoints.Add(point);
            }
        }

        if (predictionValue.HasValue)
        {
            predictedPoint = new TrendPoint
            {
                Year = 2025,
                YearString = "2025",
                LastMadm = predictionValue.Value
            };

            trendPoints.Add(predictedPoint);
        }

        StateHasChanged();
    }

    private double GetMinValue()
    {
        return trendPoints.Any() ? trendPoints.Min(p => p.LastMadm) : 0;
    }

    private double GetMaxValue()
    {
        return trendPoints.Any() ? trendPoints.Max(p => p.LastMadm) : 10;
    }

    private string GetTrendText()
    {
        if (trendPoints.Count < 2) return "";

        var lastRealPoint = trendPoints[trendPoints.Count - 2];
        var predictedPoint = trendPoints.Last();

        double difference = predictedPoint.LastMadm - lastRealPoint.LastMadm;
        string trend = difference > 0 ? "emelked√©s" : "cs√∂kken√©s";
        double percentChange = Math.Abs(difference / lastRealPoint.LastMadm * 100);

        return $"{Math.Abs(difference):F2} ponttal {trend} ({percentChange:F1}%) a 2024-es √°tlaghoz k√©pest";
    }
}